/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 1024
extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];
char str[BUF_SIZE];
extern int max_scope;
extern void create_symbol();
extern void insert_symbol();
extern int lookup_symbol();
extern void dump_symbol();
extern void print_symbol();

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1);printf("%s",yytext); }
#define STR {strncat(str, yytext, BUF_SIZE - strlen(str) - 1);}
#define CLEAR { bzero(buf, sizeof(buf)); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     {CONCAT; return *yytext;}
"-" 	{CONCAT; return *yytext;}
"*" 	{CONCAT; return *yytext;}
"/" 	{CONCAT; return *yytext;}
"%"     {CONCAT; return *yytext;}
"++"    {CONCAT; return INC;}
"--"    {CONCAT; return DEC;}

 /* Relational */
">"		{CONCAT; return ML;}
"<"		{CONCAT; return LT;}
">="	{CONCAT; return MLE;}
"<="	{CONCAT; return LTE;}
"=="	{CONCAT; return EQ;}
"!="	{CONCAT; return NE;}

 /* Assignment */
"="		{CONCAT; return *yytext;}
"+="	{CONCAT; return ADDASGN;}
"-="	{CONCAT; return SUBASGN;}
"*="	{CONCAT; return MULASGN;}
"/="	{CONCAT; return DIVASGN;}
"%="	{CONCAT; return MODASGN;}

 /* Logical */
"&&"	{CONCAT; return AND;}
"||"	{CONCAT; return OR;}
"!"		{CONCAT; return NOT;}

 /* Delimiters */
"("		{CONCAT; return LB;}
")"		{CONCAT; return RB;}
"{"		{CONCAT; max_scope++; return LCB;}
"}"		{CONCAT; dump_symbol();return RCB;}
"["		{CONCAT; return LSB;}
"]"		{CONCAT; return RSB;}
","		{CONCAT; return COMMA;}

 /* Print Keywords */
"print"		{CONCAT; return PRINT;}

 /* Condition and Loop Keywords */
"if"		{CONCAT; return IF;}
"else"		{CONCAT; return ELSE;}
"for"		{CONCAT; return FOR;}
"while"		{CONCAT; return WHILE;}

 /* Declaration Keywords */
"void"		{CONCAT; yylval.string="void"; return VOID;}
"int"		{CONCAT; yylval.string="int"; return INT;}
"float"  	{CONCAT; yylval.string="float"; return FLOAT;}
"string"  	{CONCAT; yylval.string="string"; return STRING;}
"bool"  	{CONCAT; yylval.string="bool"; return BOOL;}

 /* boolean Keywords */
"true"      {CONCAT; return T;}
"false"     {CONCAT; return F;}

"return"    {CONCAT; return RETURN;}

 /* String Constant */
\"				        { bzero(str, sizeof(str));BEGIN STRING_STATE; }
<STRING_STATE>\"		{ BEGIN INITIAL;yylval.string=strdup(str);return STR_CONST;}
<STRING_STATE>[^"]*		{ STR;CONCAT; }

 /* Number Constant */
{integer}	{CONCAT; yylval.i_val=atoi(yytext);return I_CONST;}
{float}	    {CONCAT; yylval.f_val=atof(yytext);return F_CONST;}

 /* C type Comment */
"/*"				{ CONCAT;BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT;}
<COMMENT>\n			{ CONCAT;}
<COMMENT>"*"		{ CONCAT;}
<COMMENT>"*/"		{ CONCAT;BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT; }

 /* Variable ID */
 {id}       {bzero(str, sizeof(str));CONCAT;STR;yylval.string=strdup(str);return ID;}

 /* others */

[;]         {CONCAT; return SEMICOLON;}
[\n]        {CONCAT; CLEAR;}
[ \t]		{CONCAT; } /* Ignore */
[^ \t\n] 	{CONCAT; } /* Ignore other charactor sets */
<<EOF>>     {dump_symbol();return 0;}

%%

int yywrap()
{
    return 1;
}
