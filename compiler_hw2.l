/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 100
extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     {CONCAT; return *yytext;}
"-" 	{CONCAT; return *yytext;}
"*" 	{CONCAT; return *yytext;}
"/" 	{CONCAT; return *yytext;}
"%"     {CONCAT; return *yytext;}
"++"    {CONCAT; return *yytext;}
"--"    {CONCAT; return *yytext;}

 /* Relational */
">"		{CONCAT; return *yytext;}
"<"		{CONCAT; return *yytext;}
">="	{CONCAT; return *yytext;}
"<="	{CONCAT; return *yytext;}
"=="	{CONCAT; return *yytext;}
"!="	{CONCAT; return *yytext;}

 /* Assignment */
"="		{printf("=\n");CONCAT; return *yytext;}
"+="	{CONCAT; return *yytext;}
"-="	{CONCAT; return *yytext;}
"*="	{CONCAT; return *yytext;}
"/="	{CONCAT; return *yytext;}
"%="	{CONCAT; return *yytext;}

 /* Logical */
"&&"	{CONCAT; return *yytext;}
"||"	{CONCAT; return *yytext;}
"!"		{CONCAT; return *yytext;}

 /* Delimiters */
"("		{ }
")"		{  }
"{"		{  }
"}"		{  }
"["		{  }
"]"		{  }
","		{  }

 /* Print Keywords */
"print"		{  }

 /* Condition and Loop Keywords */
"if"		{  }
"else"		{  }
"for"		{  }
"while"		{  }

 /* Declaration Keywords */
"void"		{CONCAT; return VOID;}
"int"		{printf("int\n");CONCAT; return INT;}
"float"  	{CONCAT; return FLOAT;}
"string"  	{CONCAT; return STRING;}
"bool"  	{CONCAT; return BOOL;}

 /* boolean Keywords */
"true"      {  }
"false"     {  }

"return"    { }

 /* String Constant */
\"				        { BEGIN STRING_STATE; }
<STRING_STATE>\"		{ BEGIN INITIAL; }
<STRING_STATE>[^"]*		{  }

 /* Number Constant */
{integer}	{printf("int_const:%s\n",yytext);CONCAT; return I_CONST;}
{float}	    {CONCAT; return F_CONST;}

 /* C type Comment */
"/*"				{ BEGIN COMMENT; }
<COMMENT>[^*\n]+	{  }
<COMMENT>\n			{  }
<COMMENT>"*"		{  }
<COMMENT>"*/"		{  BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{  }

 /* Variable ID */
 {id}       {printf("ID\n");CONCAT; return ID;}

 /* others */

[;]         {printf(";\n");CONCAT; return SEMICOLON;}
[\n]        {printf("lex:%s\n", buf); bzero(buf, sizeof(buf));}
[ \t]		{ } /* Ignore */
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     {return 0;}

%%

int yywrap()
{
    return 1;
}
